import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
    repositories {
        google()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.vanniktech:gradle-maven-publish-plugin:$maven_publish_plugin_version"
        classpath "com.ahmedmourad.mirror:mirror-gradle-plugin"
    }
}

String resolvedJvmTarget = System.getenv().getOrDefault("ci_java_version", "1.8")
allprojects {
    repositories {
        google()
        mavenCentral()
        jcenter()
    }

    pluginManager.withPlugin("org.jetbrains.kotlin.jvm") {
        project.tasks.withType(KotlinCompile).configureEach {
            kotlinOptions {
                jvmTarget = resolvedJvmTarget
                freeCompilerArgs += ["-progressive"]
            }
        }
    }
}

subprojects {
    configurations.all {
        resolutionStrategy {
            dependencySubstitution {
                // The Kotlin plugin will try to add the compiler-plugin to dependencies with a version
                // We have it local to this project, so we want it to just substitute that with the local project
                // Not needed for external consumers
                substitute module("com.ahmedmourad.mirror:compiler-plugin") with project(":compiler-plugin")

                // The Gradle plugin will add the annotations artifact to dependencies if a custom annotation isn"t defined.
                // Not needed for external consumers
                substitute module("com.ahmedmourad.mirror:annotations") with project(":annotations")
            }
        }
    }
}
